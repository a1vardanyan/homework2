def cycle_length(n, m):
    rem = n % m
    N = []
    period = []
    N.append(rem)
    full = []
    full.append(rem * 10 // m)
    for i in range(1, m + 1):
#        print([i, rem, rem * 10 // m, rem * 10 // m + rem * m])
        period.append(rem * 10 // m)
        rem = (10 * rem) % m
        if rem in N:
            d = N.index(rem)
            break
        N.append(rem)
        full.append(rem * 10 // m)
    period = period[d:i]
    return [i - d, N, period, d, full[0:d]]
    
def correct(n, m):
    per = str()
    bper = str()
    for i in cycle_length(n, m)[2]:
        per += str(i)
    for j in cycle_length(n, m)[4]:
        bper += str(j)
    if len(bper) == 0 and per != '0':
        print(str(n // m) + '.' + '(' + per + ')')
    elif len(bper) != 0 and per == '0':
        print(str(n // m) + '.' + bper)
    elif len(bper) == 0 and per == '0':
        print(str(n // m))
    else:
        print(str(n // m) + '.' + bper + '(' + per + ')')
    print(n / m)

correct(3227 ,555)
